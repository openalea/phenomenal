{% set pyproject = load_file_data('../pyproject.toml', from_recipe_dir=True) %}
{% set name = pyproject.get('project').get('name') %}
{% set description = pyproject.get('project').get('description') %}
{% set version = GIT_DESCRIBE_TAG | replace("v", "") %}
{% set license = pyproject.get('project').get('license') %}
{% set home = pyproject.get('project', {}).get('urls', {}).get('Homepage', '') %}
{% set build_deps = pyproject.get("build-system", {}).get("requires", []) %}
{% set deps = pyproject.get('project', {}).get('dependencies', []) %}
{% set conda_deps = pyproject.get('tool', {}).get('conda-environment', {}).get('dependencies',[]) %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  path: ..

build:
  number: 0
  preserve_egg_dir: True
  ignore:
    - test/
    - doc/
    - binder/
  script:
    - {{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-build-isolation -vv

requirements:
  host:
    - python
    {% for dep in build_deps %}
    - {{ dep }}
    {% endfor  %}

  build:
    - {{ compiler("cxx") }}

  run:
    - python
    {% for dep in deps + conda_deps %}
    - {{ dep }}
    {% endfor %}


test:
  imports:
    - openalea.phenomenal
    - openalea.phenomenal.calibration
    - openalea.phenomenal.data
    - openalea.phenomenal.display
    - openalea.phenomenal.image
    - openalea.phenomenal.mesh
    - openalea.phenomenal.multi_view_reconstruction
    - openalea.phenomenal.object
    - openalea.phenomenal.segmentation
    - openalea.phenomenal.tracking
  requires:
    - pytest
  source_files:
    - test/
  commands:
    - pytest

about:
  home: {{ home }}
  summary: {{ description }}
  license: {{ license }}

extra:
  recipe-maintainers:
    - artzet-s
    - pradal
    - fournier
